dnl YAZ Toolkit, Index Data 1994-2001
dnl See the file LICENSE for details.
dnl $Id: configure.in,v 1.54 2001-11-13 23:00:42 adam Exp $
AC_INIT(include/yaz/yaz-version.h)
AM_INIT_AUTOMAKE(yaz, 1.8.2)
dnl
AC_SUBST(READLINE_LIBS)
dnl ------ Checking programs
AC_PROG_CC
AC_PROG_CPP
AC_PROG_INSTALL
AM_DISABLE_SHARED
AM_PROG_LIBTOOL
dnl 
dnl ----- yaz-comp: The Yaz Compiler
AC_SUBST(EXTRAMODULE)
AC_SUBST(EXTRALIB)

EXTRAMODULE="z39.50 zutil"

AC_ARG_ENABLE(modules,[  --enable-modules=\"mod ..\" ill],[
if test "$enable_modules" != "no"; then
		EXTRAMODULE="$EXTRAMODULE $enable_modules"
fi
],[
EXTRAMODULE="$EXTRAMODULE ill ccl zoom"
])
EXTRALIB=""
for module in $EXTRAMODULE; do
	EXTRALIB="$EXTRALIB ../$module/lib${module}.la"
	if test $module = "z39.50"; then
		module=z3950
	fi
	AC_DEFINE_UNQUOTED(YAZ_MODULE_${module})
done
dnl ----- Sockets
checkBoth=0
AC_CHECK_FUNC(connect)
if test "$ac_cv_func_connect" = "no"; then
	AC_CHECK_LIB(socket, main, LIBS="$LIBS -lsocket", checkBoth=1)
fi
if test "$checkBoth" = "1"; then
	oldLibs=$LIBS
	LIBS="$LIBS -lsocket -lnsl"
	AC_CHECK_FUNC(accept, , [LIBS=$oldLibs])
fi
AC_CHECK_FUNC(gethostbyname, , AC_CHECK_LIB(nsl, main, [LIBS="$LIBS -lnsl"]))
dnl
dnl ------ Open SSL
openssl=no
AC_ARG_WITH(openssl, [  --with-openssl[=DIR]    OpenSSL library in DIR], [openssl=$withval])
if test "$openssl" = "yes"; then
	AC_CHECK_LIB(crypto, main)
	AC_CHECK_LIB(ssl, SSL_new)
	if test "$ac_cv_lib_ssl_SSL_new" = "yes"; then
		AC_CHECK_HEADERS(openssl/ssl.h)
	fi
fi
dnl ------ GNU Readline
READLINE_SHARED_LIBADD=""
AC_CHECK_LIB(ncurses, tgetent, [READLINE_SHARED_LIBADD="-lncurses"],
	AC_CHECK_LIB(termcap, tgetent, [READLINE_SHARED_LIBADD="-ltermcap"])
)
READLINE_LIBS=""
AC_CHECK_LIB(readline, readline, [READLINE_LIBS="$READLINE_LIBS -lreadline $READLINE_SHARED_LIBADD"],,$READLINE_SHARED_LIBADD)
AC_CHECK_LIB(history, add_history, [READLINE_LIBS="$READLINE_LIBS -lhistory"])
if test "$ac_cv_lib_readline_readline" = "yes"; then
	AC_CHECK_HEADERS(readline/readline.h readline/history.h)
fi
dnl ------ various functions
AC_CHECK_FUNCS(vsnprintf gettimeofday poll)
if test "$ac_cv_func_poll" = "yes"; then
        AC_CHECK_HEADERS(sys/poll.h)
fi
dnl
dnl ------ tcpd
AC_ARG_ENABLE(tcpd,[  --enable-tcpd[=PREFIX]  enable TCP wrapper for server if available])
if test "$enable_tcpd" != ""; then
	oldLibs=$LIBS
	oldCPPFLAGS=$CPPFLAGS
	if test "$enable_tcpd" != "yes"; then
		LIBS="$LIBS -L$enable_tcpd/lib"
		CPPFLAGS="$CPPFLAGS -I$enable_tcpd/include"
	fi
	AC_MSG_CHECKING(for working tcpd.h)
	LIBS="$LIBS -lwrap -lnsl"
	AC_TRY_LINK([#include <syslog.h>
#include <tcpd.h>
	int allow_severity = LOG_INFO;
	int deny_severity = LOG_WARNING;],
	[struct request_info request_info; int i;
	i = hosts_access(&request_info);],
	tcpd_ok=1, tcpd_ok=0)
	if test "$tcpd_ok" = "0"; then
		AC_MSG_RESULT(no)
		LIBS=$oldLibs
		CPPFLAGS=$oldCPPFLAGS
	else
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_TCPD_H)
	fi
fi
dnl
dnl ------ Headers
AC_STDC_HEADERS
if test "$ac_cv_header_stdc" = "no"; then
	AC_MSG_WARN(Your system doesn't seem to support ANSI C)
fi
dnl
AC_SUBST(LIBTHREAD)
AC_SUBST(CFLAGSTHREADS)
HAVETHREADS=0
CFLAGSTHREADS=""
LIBTHREAD=""
dnl
AC_ARG_ENABLE(pth, [  --enable-pth            enable GNU threads],[enable_pth=$enableval],[enable_pth=no])
AC_SUBST(LIBPTH)
if test "$enable_pth" = "yes"; then
	OLIBS=$LIBS
	AC_CHECK_LIB(pth,main)
	if test "$ac_cv_lib_pth_main" = "yes"; then
        	AC_CHECK_HEADERS(pth.h)
		if test "$ac_cv_header_pth_h" = "yes"; then
			LIBTHREAD="-lpth"
			CFLAGSTHREADS="-DYAZ_GNU_THREADS=1"
			HAVETHREADS=1
		fi
	fi	
	LIBS=$OLIBS
fi
dnl
dnl ------ POSIX Threads
AC_ARG_ENABLE(threads, [  --disable-threads       disable POSIX threads],[enable_threads=$enableval],[enable_threads=yes])
if test "$enable_threads" = "yes" -a "$HAVETHREADS" = "0"; then
	OLIBS=$LIBS
	OCC=$CC
	AC_CHECK_LIB(pthread,main)
	AC_MSG_CHECKING(for working POSIX Threads)
	AC_TRY_LINK([#include <pthread.h>
	void *func(void *p) { return 0; }
	],[
	pthread_t pthread_id;
	pthread_create (&pthread_id, 0, func, 0);],
		thread_ok=yes,thread_ok=no)
	if test "$thread_ok" = "yes"; then
		AC_MSG_RESULT(yes)
		LIBTHREAD=-lpthread
		CFLAGSTHREADS="-DYAZ_POSIX_THREADS=1 -D_REENTRANT"
		HAVETHREADS=1
	else
		CC="$CC -pthread"
		AC_TRY_LINK([#include <pthread.h>
			void *func(void *p) { return 0; }
			],[
			pthread_t pthread_id;
			pthread_create (&pthread_id, 0, func, 0);],
			thread_ok=yes,thread_ok=no)
		if test "$thread_ok" = "yes"; then
			AC_MSG_RESULT([yes,BSD])
			CFLAGSTHREADS="-pthread -DYAZ_POSIX_THREADS=1 -D_REENTRANT"
			HAVETHREADS=1
		fi
	fi
	if test "$thread_ok" = "no"; then
		AC_MSG_RESULT(no)
	fi
	CC=$OCC
	LIBS=$OLIBS
fi
AM_CONDITIONAL(ISTHR, test $HAVETHREADS = "1")
dnl ------ Using this for "in-source" yaz-config
AC_SUBST(YAZ_SRC_ROOT)
AC_SUBST(YAZ_BUILD_ROOT)
YAZ_SRC_ROOT=`cd ${srcdir}; pwd`
YAZ_BUILD_ROOT=`pwd`
dnl
if test -f ${srcdir}/lib/yaz-config.in; then
	rm ${srcdir}/lib/yaz-config.in
fi
sed s%yaz_echo_source=yes%yaz_echo_source=no%g < ${srcdir}/yaz-config.in >${srcdir}/lib/yaz-config.in
dnl
SUBDIRS_VAR="util odr comstack $EXTRAMODULE tab retrieval server include lib include client ztest"
AC_SUBST(SUBDIRS_VAR)
dnl ------ Makefiles
dnl
AC_OUTPUT([
Makefile
util/Makefile
odr/Makefile
z39.50/Makefile
ill/Makefile
zutil/Makefile
comstack/Makefile
ccl/Makefile
tab/Makefile
retrieval/Makefile
server/Makefile
include/Makefile
include/yaz/Makefile
lib/Makefile
zoom/Makefile
client/Makefile
ztest/Makefile
doc/Makefile
yaz-config
lib/yaz-config
],[chmod +x yaz-config lib/yaz-config])
