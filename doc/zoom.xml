<!-- $Id: zoom.xml,v 1.1 2001-10-23 21:00:19 adam Exp $ -->
 <chapter><title>ZOOM</title>
  
  <para>
   &zoom; is an acronym for Z39.50 Object Oriented Model and is
   an initiative started by Mike Taylor. The goal of &zoom; is to
   provide a common Z39.50 client API not bound to a particular
   programming language or toolkit.
  </para>
  <para>
   The lack of a simple Z39.50 client API for &yaz; was more apparanet
   than ever. So, when the first ZOOM specification was available
   an implementation for &yaz; was developed. For the first time, it is
   now easier to develop clients than servers with &yaz;. This
   chapter describes the ZOOM C binding. Before going futher
   reconsider whether C is still the programming language of your
   choice. There are other language bindings available and others
   are in active development. See the ZOOM website at
   <ulink url="http://zoom.z3950.org/">zoom.z3950.org</ulink> for
   more information.
  </para>

  <para>
   In order to fully understand this chapter you should read and
   try the example programs <literal>zoomtst1.c</literal>,
   <literal>zoomtst2.c</literal>, .. in the <literal>zoom</literal>
   directory.
  </para>

  <para>
   The C language misses many features found in object oriented languages
   such as C++, Java, etc. For example, you'll have to, manually,
   destroy all objects you create, even though you may think of them as
   temporary. Most objects has a <literal>_create</literal> - and a
   <literal>_destroy</literal> variant.
   All objects are in fact pointers to internal stuff, but you don't see
   that because of typedefs. All destroy methods should gracefully ignore a
   <literal>NULL</literal> pointer.
  </para>
  <sect1><title>Connections</title>
 
   <para>The connection object Z3950_connection describes
   the connection between your client and a server.
   </para>
   <synopsis>
   #include &lt;yaz/zoom.h>

   Z3950_connection Z3950_connection_new (const char *host, int portnum);

   Z3950_connection Z3950_connection_create (Z3950_options options);

   void Z3950_connection_connect(Z3950_connection c, const char *host,
                                 int portnum);
   void Z3950_connection_destroy (Z3950_connection c);
   </synopsis>
   <para>
    Connection objects are created with either function
    <function>Z3950_connection_new</function> or 
    <function>Z3950_connection_create</function>.
    The former both creates and attempts to establishes a network
    connection with the target. The latter doesn't establishes
    a connection immediately, thus allowing you to set specify options
    before establishing network connection using function
    <function>Z3950_connection_connect</function>. 
    If the portnumber, <literal>portnum</literal>, is zero, the
    <literal>host</literal> is consulted for a port specification.
    If no port is given, 210 is used. A colon denotes the beginning of
    a port number in the host string. If the host string includes a
    slash that specifies a database for the connection.
   </para>
   <para>
    Connection objects should be destroyed using function
    <function>Z3950_connection_destroy</function>.
   </para>
   <synopsis>
    const char *Z3950_connection_option (Z3950_connection c,
                                         const char *key,
                                         const char *val);
   </synopsis>
   <para>
    The <function>Z3950_connection_option</function> allows you to
    inspect or set an option given by <parameter>key</parameter>
    for the connection.
    If <parameter>val</parameter> is non-<literal>NULL</literal> that
    holds the new value for option.
    Otherwise, if <parameter>val</parameter> is <literal>NULL</literal>
    the option is unchanged.
    The function returns the previous value of the option.
   </para>
   <synopsis>
     const char *Z3950_connection_host (Z3950_connection c);

   </synopsis>
   <para>
     Function <function>Z3950_connection_host</function> returns
     the host for the connection as specified in either a call to
     <function>Z3950_connection_new</function> or 
     <function>Z3950_connection_connect</function>.
     This function returns <literal>NULL</literal> if host isn't
     set for the connection.
   </para>
   <synopsis>
     int Z3950_connection_error (Z3950_connection c, const char **cp,
                                 const char **addinfo);
   </synopsis>
   <para>
     Use <function>Z3950_connection_error</function> to check for
     errors for the last operation(s) performed. The function returns
     zero if no errors occurred; non-zero otherwise indicating the error.
     Pointers <parameter>cp</parameter> and <parameter>addinfo</parameter>
     holds messages for the error and additional-info if passed as
     non-<literal>NULL</literal>.
   </para>
  </sect1>
  <sect1><title>Search objects</title>
   <para>
     Search objects defines how result sets are obtained. They
     act like queries.
   </para>
   <synopsis>
     Z3950_search Z3950_search_create(void);

     void Z3950_search_destroy(Z3950_search s);

     int Z3950_search_prefix(Z3950_search s, const char *str);

     int Z3950_search_sortby(Z3950_search s, const char *criteria);
   </synopsis>
   <para>
     Create search objects using <function>Z3950_search_create</function>
     and destroy them by calling <function>Z3950_search_destroy</function>.
     RPN-queries can be specified in PQF notation by using the
     function <function>Z3950_search_prefix</function>. More
     query types will be added later, such as CCL to RPN-mapping, CCL
     query, etc.
     In addition to a search a sort critieria may be set. Function
     <function>Z3950_search_sortby</function> specifies a sort
     criteria using the same string notation for sort as offered by
     the YAZ client.
   </para>
  </sect1>
  <sect1><title>Result sets</title>
   <para>
     The result set describes a collection of records obtained from
     search.
   </para>
   <synopsis>
     Z3950_resultset Z3950_connection_search(Z3950_connection,
                                             Z3950_search q);

     Z3950_resultset Z3950_connection_search_pqf(Z3950_connection c,
                                                 const char *q);

     void Z3950_resultset_destroy(Z3950_resultset r);
   </synopsis>
   <para>
     Function <function>Z3950_connection_search</function> creates
     a result set given a connection - and search object.
     Destroy a result set by calling
     <function>Z3950_resultset_destroy</function>.
     Simple clients using YAZ' prefix query format may use
     function <function>Z3950_connection_search_pqf</function>
     instead.
   </para>
   <synopsis>
     const char *Z3950_resultset_option (Z3950_resultset r,
                                         const char *key,
                                         const char *val);

     int Z3950_resultset_size (Z3950_resultset r);

     void *Z3950_resultset_get (Z3950_resultset s, int pos,
                                const char *type, int *len);
     void Z3950_resultset_records (Z3950_resultset r,
                                   Z3950_record *recs,
			           size_t *cnt);
   </synopsis>
   <para>
     Description of result sets here.
   </para>
  </sect1>
  <sect1><title>Records</title>
   <para>
     A record object is a retrival record on the client side -
     created from result sets.
   </para>
   <synopsis>
     Z3950_record Z3950_resultset_record (Z3950_resultset s, int pos);

     Z3950_record Z3950_resultset_record_immediate (Z3950_resultset s,
                                                    int pos);

     void *Z3950_record_get (Z3950_record rec, const char *type,
                             int *len);

     void Z3950_record_destroy (Z3950_record rec);
   </synopsis>
  </sect1>
  <sect1><title>Options</title>
   <para>
     Most objects in &zoom; allows you to specify options to change
     behaviour. From an implementation point of view a set of options
     is just like an associate array / hash array, etc.
   </para>
   <synopsis>
     Z3950_options Z3950_options_create (void);

     Z3950_options Z3950_options_create_with_parent (Z3950_options parent);

     void Z3950_options_destroy (Z3950_options opt);
   </synopsis>
   <synopsis>
     const char *Z3950_options_get (Z3950_options opt, const char *name);

     void Z3950_options_set (Z3950_options opt, const char *name,
                             const char *v);
   </synopsis>
   <synopsis>
     typedef const char *(*Z3950_options_callback)
                                     (void *handle, const char *name);

     Z3950_options_callback
             Z3950_options_set_callback (Z3950_options opt,
                                         Z3950_options_callback c,
					 void *handle);
   </synopsis>
  </sect1>
  <sect1><title>Events</title>
   <para>
     If you're developing non-blocking applications you have to deal 
     with events.
   </para>
   <synopsis>
     int Z3950_event (int no, Z3950_connection *cs);
   </synopsis>
  </sect1>
 </chapter>
 
 <!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 sgml-parent-document: "yaz.xml"
 sgml-local-catalogs: "../../docbook/docbook.cat"
 sgml-namecase-general:t
 End:
 -->
 
